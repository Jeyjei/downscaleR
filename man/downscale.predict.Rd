% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downscale.predict.R
\name{downscale.predict}
\alias{downscale.predict}
\title{Downscale climate data for a given statistical model.}
\usage{
downscale.predict(newdata, model)
}
\arguments{
\item{newdata}{The grid data. It should be an object as returned by  \code{\link[downscaleR]{prepare_newdata}}.}

\item{model}{An object containing the statistical model as returned from  \code{\link[downscaleR]{downscale.train}}.}
}
\value{
An object with the predictions.
}
\description{
Downscale data to local scales by statistical models previously obtained by \code{\link[downscaleR]{downscale.train}}.
}
\details{
The function can downscale in both global and local mode, though not simultaneously.
}
\examples{
# Loading predictors
x <- makeMultiGrid(NCEP_Iberia_hus850, NCEP_Iberia_ta850)
x <- subsetGrid(x, years = 1985:1995)
# Loading predictands
y <- VALUE_Iberia_pr
y <- getTemporalIntersection(obs = y,prd = x, "obs" )
ybin <- convert2bin(y, threshold = 1)
# Prepare predictors
xT <- prepare_predictors(x = x, y = y)
# Downscaling PRECIPITATION
#' # ... via analogs ...
model.ocu <- downscale.train(ybin, xT, method = "analogs", sel.fun = "mean")
model.reg <- downscale.train(y, xT, method = "analogs", sel.fun = "mean")
pred.ocu <- downscale.predict(xT, model.ocu)
pred.reg <- downscale.predict(xT, model.reg)
# ... via a linear model ...
model.ocu <- downscale.train(ybin, xT, method = "GLM" ,family = binomial(link = "logit"))
model.reg <- downscale.train(y, xT, method = "MLR", fitting = "MP")
pred.ocu <- downscale.predict(xT,model.ocu)
pred.reg <- downscale.predict(xT,model.reg)
pred <- pred.ocu$Data * pred.reg$Data
# ... via a extreme learning machine ...
model.ocu <- downscale.train(ybin, xT, method = "ELM", neurons = 200)
model.reg <- downscale.train(y, xT, method = "ELM", neurons = 200)
pred.ocu <- downscale.predict(xT,model.ocu)
pred.reg <- downscale.predict(xT,model.reg)
pred <- pred.ocu$Data * pred.reg$Data
# ... via a neural network ...
model.ocu <- downscale.train(ybin, xT, method = "NN", learningrate = 0.1, numepochs = 10, hidden = 5, output = 'linear') 
model.reg <- downscale.train(y, xT, method = "NN", learningrate = 0.1, numepochs = 10, hidden = 5, output = 'linear') 
pred.ocu <- downscale.predict(xT,model.ocu)
pred.reg <- downscale.predict(xT,model.reg)
pred <- pred.ocu$Data * pred.reg$Data
# Downscaling PRECIPITATION - Local model with the closest 4 grid points.
xT <- prepare_predictors(x = x,y = y,local.predictors = list(neigh.vars = "shum850",n.neighs = 4))
model.ocu <- downscale.train(ybin, xT, method = "MLR", fitting = 'MP')
model.reg <- downscale.train(y, xT, method = "MLR", fitting = 'MP')
pred.ocu <- downscale.predict(xT,model.ocu)
pred.reg <- downscale.predict(xT,model.reg)
pred <- pred.ocu$Data * pred.reg$Data
# Downscaling PRECIPITATION - Principal Components (PCs)
xT <- prepare_predictors(x = x,y = y, PCA = list(which.combine = getVarNames(x),v.exp = 0.9))
model.ocu <- downscale.train(ybin, xT, method = "MLR" ,fitting = 'MP')
model.reg <- downscale.train(y, xT, method = "MLR" ,fitting = 'MP')
}
\author{
J. Bano-Medina
}
