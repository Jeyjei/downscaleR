% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downscale.predict.R
\name{downscale.predict}
\alias{downscale.predict}
\title{Downscale climate data for a given statistical model.}
\usage{
downscale.predict(newdata, model)
}
\arguments{
\item{newdata}{The grid data. It should be an object as returned by  \code{\link[downscaleR]{prepareNewData}}.}

\item{model}{An object containing the statistical model as returned from  \code{\link[downscaleR]{downscale.train}}.}
}
\value{
A regular/irregular grid object.
}
\description{
Downscale data to local scales by statistical models previously obtained by \code{\link[downscaleR]{downscale.train}}.
}
\examples{
# Loading predictors
x <- makeMultiGrid(NCEP_Iberia_hus850, NCEP_Iberia_ta850)
x <- subsetGrid(x, years = 1985:1995)
# Loading predictands
y <- VALUE_Iberia_pr
y <- getTemporalIntersection(obs = y,prd = x, "obs" )
x <- getTemporalIntersection(obs = y,prd = x, "prd" )
ybin <- binaryGrid(y, threshold = 1)
x <- scaleGrid(x, type = "standardize")
# Prepare predictors and predictands
xyT     <- prepareData(x = x, y = y)
xyT.bin <- prepareData(x = x, y = ybin)
xyt     <- prepareNewData(newdata = x, data.structure = xyT)
xyt.bin <- prepareNewData(newdata = x, data.structure = xyT.bin)
# Downscaling PRECIPITATION
# ... via analogs ...
model <- downscale.train(xyT, method = "analogs",
                         sel.fun = "mean")
pred <- downscale.predict(xyt, model = model)
# ... via a logistic regression (ocurrence of precipitation)
# and gaussian regression (amount of precipitation) ...
model.ocu <- downscale.train(xyT.bin, method = "GLM",
                             family = binomial(link = "logit"))
pred <- downscale.predict(xyt, model = model.ocu)
model.reg <- downscale.train(xyT, method = "GLM",
                             family = "gaussian", condition = "GT", threshold = 0)
pred <- downscale.predict(xyt, model = model.reg)
# ... via a neural network ...
model.ocu <- downscale.train(xyT.bin, method = "NN",
                             learningrate = 0.1, numepochs = 10, hidden = 5,
                             output = 'linear')
pred <- downscale.predict(xyt, model = model.ocu)
model.reg <- downscale.train(xyT, method = "NN",
                             learningrate = 0.1, numepochs = 10,
                             hidden = 5, output = 'linear')
pred <- downscale.predict(xyt, model = model.reg)
# Downscaling PRECIPITATION - Local model with the closest
# 4 grid points and multisite linear regression.
xyT.local <- prepareData(x = x, y = y,
                         local.predictors = list(vars = "hus@850",n = 4))
xyt.local <- prepareNewData(newdata = x, data.structure = xyT.local)
model <- downscale.train(xyT.local,method = "analogs")
pred <- downscale.predict(xyt.local, model = model)
# Downscaling PRECIPITATION - Principal Components (PCs)
# and gamma regression for the amount of precipitation
xyT.pc <- prepareData(x = x,y = y,
                      spatial.predictors = list(which.combine = getVarNames(x),v.exp = 0.9))
xyt.pc <- prepareNewData(newdata = x, data.structure = xyT.pc)
model <- downscale.train(xyT.pc, method = "analogs")
pred <- downscale.predict(xyt.pc, model = model)
}
\author{
J. Bano-Medina
}
